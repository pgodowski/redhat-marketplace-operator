// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package filesender

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileSenderClient is the client API for FileSender service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileSenderClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (FileSender_UploadFileClient, error)
	UpdateFileMetadata(ctx context.Context, in *UpdateFileMetadataRequest, opts ...grpc.CallOption) (*UpdateFileMetadataResponse, error)
}

type fileSenderClient struct {
	cc grpc.ClientConnInterface
}

func NewFileSenderClient(cc grpc.ClientConnInterface) FileSenderClient {
	return &fileSenderClient{cc}
}

func (c *fileSenderClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (FileSender_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileSender_ServiceDesc.Streams[0], "/filesender.v1.FileSender/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileSenderUploadFileClient{stream}
	return x, nil
}

type FileSender_UploadFileClient interface {
	Send(*UploadFileRequest) error
	CloseAndRecv() (*UploadFileResponse, error)
	grpc.ClientStream
}

type fileSenderUploadFileClient struct {
	grpc.ClientStream
}

func (x *fileSenderUploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileSenderUploadFileClient) CloseAndRecv() (*UploadFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileSenderClient) UpdateFileMetadata(ctx context.Context, in *UpdateFileMetadataRequest, opts ...grpc.CallOption) (*UpdateFileMetadataResponse, error) {
	out := new(UpdateFileMetadataResponse)
	err := c.cc.Invoke(ctx, "/filesender.v1.FileSender/UpdateFileMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileSenderServer is the server API for FileSender service.
// All implementations must embed UnimplementedFileSenderServer
// for forward compatibility
type FileSenderServer interface {
	UploadFile(FileSender_UploadFileServer) error
	UpdateFileMetadata(context.Context, *UpdateFileMetadataRequest) (*UpdateFileMetadataResponse, error)
	mustEmbedUnimplementedFileSenderServer()
}

// UnimplementedFileSenderServer must be embedded to have forward compatible implementations.
type UnimplementedFileSenderServer struct {
}

func (UnimplementedFileSenderServer) UploadFile(FileSender_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFileSenderServer) UpdateFileMetadata(context.Context, *UpdateFileMetadataRequest) (*UpdateFileMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFileMetadata not implemented")
}
func (UnimplementedFileSenderServer) mustEmbedUnimplementedFileSenderServer() {}

// UnsafeFileSenderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileSenderServer will
// result in compilation errors.
type UnsafeFileSenderServer interface {
	mustEmbedUnimplementedFileSenderServer()
}

func RegisterFileSenderServer(s grpc.ServiceRegistrar, srv FileSenderServer) {
	s.RegisterService(&FileSender_ServiceDesc, srv)
}

func _FileSender_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileSenderServer).UploadFile(&fileSenderUploadFileServer{stream})
}

type FileSender_UploadFileServer interface {
	SendAndClose(*UploadFileResponse) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type fileSenderUploadFileServer struct {
	grpc.ServerStream
}

func (x *fileSenderUploadFileServer) SendAndClose(m *UploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileSenderUploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileSender_UpdateFileMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSenderServer).UpdateFileMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesender.v1.FileSender/UpdateFileMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSenderServer).UpdateFileMetadata(ctx, req.(*UpdateFileMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileSender_ServiceDesc is the grpc.ServiceDesc for FileSender service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileSender_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filesender.v1.FileSender",
	HandlerType: (*FileSenderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateFileMetadata",
			Handler:    _FileSender_UpdateFileMetadata_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _FileSender_UploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "apis/filesender/filesender.proto",
}
