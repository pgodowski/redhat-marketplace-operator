// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.24
// source: apis/filesender/filesender.proto

package filesender

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_apis_filesender_filesender_proto struct{}

func (drpcEncoding_File_apis_filesender_filesender_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_apis_filesender_filesender_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_apis_filesender_filesender_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_apis_filesender_filesender_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_apis_filesender_filesender_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCFileSenderClient interface {
	DRPCConn() drpc.Conn

	UploadFile(ctx context.Context) (DRPCFileSender_UploadFileClient, error)
	UpdateFileMetadata(ctx context.Context, in *UpdateFileMetadataRequest) (*UpdateFileMetadataResponse, error)
}

type drpcFileSenderClient struct {
	cc drpc.Conn
}

func NewDRPCFileSenderClient(cc drpc.Conn) DRPCFileSenderClient {
	return &drpcFileSenderClient{cc}
}

func (c *drpcFileSenderClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcFileSenderClient) UploadFile(ctx context.Context) (DRPCFileSender_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, "/filesender.FileSender/UploadFile", drpcEncoding_File_apis_filesender_filesender_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcFileSender_UploadFileClient{stream}
	return x, nil
}

type DRPCFileSender_UploadFileClient interface {
	drpc.Stream
	Send(*UploadFileRequest) error
	CloseAndRecv() (*UploadFileResponse, error)
}

type drpcFileSender_UploadFileClient struct {
	drpc.Stream
}

func (x *drpcFileSender_UploadFileClient) Send(m *UploadFileRequest) error {
	return x.MsgSend(m, drpcEncoding_File_apis_filesender_filesender_proto{})
}

func (x *drpcFileSender_UploadFileClient) CloseAndRecv() (*UploadFileResponse, error) {
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_apis_filesender_filesender_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcFileSender_UploadFileClient) CloseAndRecvMsg(m *UploadFileResponse) error {
	if err := x.CloseSend(); err != nil {
		return err
	}
	return x.MsgRecv(m, drpcEncoding_File_apis_filesender_filesender_proto{})
}

func (c *drpcFileSenderClient) UpdateFileMetadata(ctx context.Context, in *UpdateFileMetadataRequest) (*UpdateFileMetadataResponse, error) {
	out := new(UpdateFileMetadataResponse)
	err := c.cc.Invoke(ctx, "/filesender.FileSender/UpdateFileMetadata", drpcEncoding_File_apis_filesender_filesender_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCFileSenderServer interface {
	UploadFile(DRPCFileSender_UploadFileStream) error
	UpdateFileMetadata(context.Context, *UpdateFileMetadataRequest) (*UpdateFileMetadataResponse, error)
}

type DRPCFileSenderUnimplementedServer struct{}

func (s *DRPCFileSenderUnimplementedServer) UploadFile(DRPCFileSender_UploadFileStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCFileSenderUnimplementedServer) UpdateFileMetadata(context.Context, *UpdateFileMetadataRequest) (*UpdateFileMetadataResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCFileSenderDescription struct{}

func (DRPCFileSenderDescription) NumMethods() int { return 2 }

func (DRPCFileSenderDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/filesender.FileSender/UploadFile", drpcEncoding_File_apis_filesender_filesender_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCFileSenderServer).
					UploadFile(
						&drpcFileSender_UploadFileStream{in1.(drpc.Stream)},
					)
			}, DRPCFileSenderServer.UploadFile, true
	case 1:
		return "/filesender.FileSender/UpdateFileMetadata", drpcEncoding_File_apis_filesender_filesender_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCFileSenderServer).
					UpdateFileMetadata(
						ctx,
						in1.(*UpdateFileMetadataRequest),
					)
			}, DRPCFileSenderServer.UpdateFileMetadata, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterFileSender(mux drpc.Mux, impl DRPCFileSenderServer) error {
	return mux.Register(impl, DRPCFileSenderDescription{})
}

type DRPCFileSender_UploadFileStream interface {
	drpc.Stream
	SendAndClose(*UploadFileResponse) error
	Recv() (*UploadFileRequest, error)
}

type drpcFileSender_UploadFileStream struct {
	drpc.Stream
}

func (x *drpcFileSender_UploadFileStream) SendAndClose(m *UploadFileResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_apis_filesender_filesender_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

func (x *drpcFileSender_UploadFileStream) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.MsgRecv(m, drpcEncoding_File_apis_filesender_filesender_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcFileSender_UploadFileStream) RecvMsg(m *UploadFileRequest) error {
	return x.MsgRecv(m, drpcEncoding_File_apis_filesender_filesender_proto{})
}

type DRPCFileSender_UpdateFileMetadataStream interface {
	drpc.Stream
	SendAndClose(*UpdateFileMetadataResponse) error
}

type drpcFileSender_UpdateFileMetadataStream struct {
	drpc.Stream
}

func (x *drpcFileSender_UpdateFileMetadataStream) SendAndClose(m *UpdateFileMetadataResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_apis_filesender_filesender_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
