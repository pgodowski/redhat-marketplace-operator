// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.24
// source: adminserver/adminserver.proto

package adminserver

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_adminserver_adminserver_proto struct{}

func (drpcEncoding_File_adminserver_adminserver_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_adminserver_adminserver_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_adminserver_adminserver_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_adminserver_adminserver_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_adminserver_adminserver_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCAdminServerClient interface {
	DRPCConn() drpc.Conn

	DeleteFile(ctx context.Context, in *DeleteFileRequest) (*DeleteFileResponse, error)
	CleanTombstones(ctx context.Context, in *CleanTombstonesRequest) (*CleanTombstonesResponse, error)
}

type drpcAdminServerClient struct {
	cc drpc.Conn
}

func NewDRPCAdminServerClient(cc drpc.Conn) DRPCAdminServerClient {
	return &drpcAdminServerClient{cc}
}

func (c *drpcAdminServerClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcAdminServerClient) DeleteFile(ctx context.Context, in *DeleteFileRequest) (*DeleteFileResponse, error) {
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, "/adminserver.AdminServer/DeleteFile", drpcEncoding_File_adminserver_adminserver_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAdminServerClient) CleanTombstones(ctx context.Context, in *CleanTombstonesRequest) (*CleanTombstonesResponse, error) {
	out := new(CleanTombstonesResponse)
	err := c.cc.Invoke(ctx, "/adminserver.AdminServer/CleanTombstones", drpcEncoding_File_adminserver_adminserver_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCAdminServerServer interface {
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	CleanTombstones(context.Context, *CleanTombstonesRequest) (*CleanTombstonesResponse, error)
}

type DRPCAdminServerUnimplementedServer struct{}

func (s *DRPCAdminServerUnimplementedServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAdminServerUnimplementedServer) CleanTombstones(context.Context, *CleanTombstonesRequest) (*CleanTombstonesResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCAdminServerDescription struct{}

func (DRPCAdminServerDescription) NumMethods() int { return 2 }

func (DRPCAdminServerDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/adminserver.AdminServer/DeleteFile", drpcEncoding_File_adminserver_adminserver_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServerServer).
					DeleteFile(
						ctx,
						in1.(*DeleteFileRequest),
					)
			}, DRPCAdminServerServer.DeleteFile, true
	case 1:
		return "/adminserver.AdminServer/CleanTombstones", drpcEncoding_File_adminserver_adminserver_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAdminServerServer).
					CleanTombstones(
						ctx,
						in1.(*CleanTombstonesRequest),
					)
			}, DRPCAdminServerServer.CleanTombstones, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterAdminServer(mux drpc.Mux, impl DRPCAdminServerServer) error {
	return mux.Register(impl, DRPCAdminServerDescription{})
}

type DRPCAdminServer_DeleteFileStream interface {
	drpc.Stream
	SendAndClose(*DeleteFileResponse) error
}

type drpcAdminServer_DeleteFileStream struct {
	drpc.Stream
}

func (x *drpcAdminServer_DeleteFileStream) SendAndClose(m *DeleteFileResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_adminserver_adminserver_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAdminServer_CleanTombstonesStream interface {
	drpc.Stream
	SendAndClose(*CleanTombstonesResponse) error
}

type drpcAdminServer_CleanTombstonesStream struct {
	drpc.Stream
}

func (x *drpcAdminServer_CleanTombstonesStream) SendAndClose(m *CleanTombstonesResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_adminserver_adminserver_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
