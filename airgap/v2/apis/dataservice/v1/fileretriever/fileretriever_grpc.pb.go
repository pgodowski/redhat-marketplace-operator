// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fileretriever

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileRetrieverClient is the client API for FileRetriever service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileRetrieverClient interface {
	// Lists files.
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error)
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (FileRetriever_DownloadFileClient, error)
}

type fileRetrieverClient struct {
	cc grpc.ClientConnInterface
}

func NewFileRetrieverClient(cc grpc.ClientConnInterface) FileRetrieverClient {
	return &fileRetrieverClient{cc}
}

func (c *fileRetrieverClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, "/dataservice.v1.fileretriever.FileRetriever/ListFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileRetrieverClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error) {
	out := new(GetFileResponse)
	err := c.cc.Invoke(ctx, "/dataservice.v1.fileretriever.FileRetriever/GetFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileRetrieverClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (FileRetriever_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileRetriever_ServiceDesc.Streams[0], "/dataservice.v1.fileretriever.FileRetriever/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileRetrieverDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileRetriever_DownloadFileClient interface {
	Recv() (*DownloadFileResponse, error)
	grpc.ClientStream
}

type fileRetrieverDownloadFileClient struct {
	grpc.ClientStream
}

func (x *fileRetrieverDownloadFileClient) Recv() (*DownloadFileResponse, error) {
	m := new(DownloadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileRetrieverServer is the server API for FileRetriever service.
// All implementations must embed UnimplementedFileRetrieverServer
// for forward compatibility
type FileRetrieverServer interface {
	// Lists files.
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
	GetFile(context.Context, *GetFileRequest) (*GetFileResponse, error)
	DownloadFile(*DownloadFileRequest, FileRetriever_DownloadFileServer) error
	mustEmbedUnimplementedFileRetrieverServer()
}

// UnimplementedFileRetrieverServer must be embedded to have forward compatible implementations.
type UnimplementedFileRetrieverServer struct {
}

func (UnimplementedFileRetrieverServer) ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedFileRetrieverServer) GetFile(context.Context, *GetFileRequest) (*GetFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedFileRetrieverServer) DownloadFile(*DownloadFileRequest, FileRetriever_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedFileRetrieverServer) mustEmbedUnimplementedFileRetrieverServer() {}

// UnsafeFileRetrieverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileRetrieverServer will
// result in compilation errors.
type UnsafeFileRetrieverServer interface {
	mustEmbedUnimplementedFileRetrieverServer()
}

func RegisterFileRetrieverServer(s grpc.ServiceRegistrar, srv FileRetrieverServer) {
	s.RegisterService(&FileRetriever_ServiceDesc, srv)
}

func _FileRetriever_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileRetrieverServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.v1.fileretriever.FileRetriever/ListFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileRetrieverServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileRetriever_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileRetrieverServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataservice.v1.fileretriever.FileRetriever/GetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileRetrieverServer).GetFile(ctx, req.(*GetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileRetriever_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileRetrieverServer).DownloadFile(m, &fileRetrieverDownloadFileServer{stream})
}

type FileRetriever_DownloadFileServer interface {
	Send(*DownloadFileResponse) error
	grpc.ServerStream
}

type fileRetrieverDownloadFileServer struct {
	grpc.ServerStream
}

func (x *fileRetrieverDownloadFileServer) Send(m *DownloadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

// FileRetriever_ServiceDesc is the grpc.ServiceDesc for FileRetriever service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileRetriever_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dataservice.v1.fileretriever.FileRetriever",
	HandlerType: (*FileRetrieverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFiles",
			Handler:    _FileRetriever_ListFiles_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _FileRetriever_GetFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadFile",
			Handler:       _FileRetriever_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dataservice/v1/fileretriever/fileretriever.proto",
}
