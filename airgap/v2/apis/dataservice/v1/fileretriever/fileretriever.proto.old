syntax = "proto3";

package dataservice.v1.fileretriever;

import "dataservice/v1/model.proto";
import "google/api/annotations.proto";

service FileRetriever {
  // Lists files.
  rpc ListFiles(ListFilesRequest) returns (ListFilesResponse) {
    // List method maps to HTTP GET.
    option (google.api.http) = {
      get: "/v1/files"
    };
  };

  rpc GetFile(GetFileRequest) returns (GetFileResponse) {
    option (google.api.http) = {
      get: "/v1/files/{id}"
    };
  };

  rpc DownloadFile(DownloadFileRequest) returns (stream DownloadFileResponse) {
    option (google.api.http) = {
      get: "/v1/files/{id}/download"
    };
  };
}

message ListFileMetadataRequest {
  message ListFileFilter {
    enum Comparison {
      EQUAL = 0;
      LESS_THAN = 1;
      GREATER_THAN = 2;
      CONTAINS = 3;
    }

    string key = 1;
    Comparison operator = 2;
    string value = 3;
  }

  message ListFileSort {
    enum SortOrder {
        ASC = 0;
        DESC = 1;
    }

    string key = 1;
    SortOrder sort_order = 2;
  }

  repeated ListFileFilter filter_by = 1;
  repeated ListFileSort sort_by = 2;
  bool include_deleted_files = 3;
}

message ListFilesRequest {
  // The maximum number of items to return.
  int32 page_size = 1;

  // The next_page_token value returned from a previous List request, if any.
  string page_token = 2;

  string filter = 3;

  string order_by = 4;
}

message ListFilesResponse {
  // The field name should match the noun "files" in the method name.  There
  // will be a maximum number of items returned based on the page_size field
  // in the request.
  repeated FileInfo files = 1;

  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}


message ListFileMetadataResponse {
  dataservice.v1.FileInfo results = 1;
}

message GetFileRequest {
  string id = 1;
}

message GetFileResponse {
  dataservice.v1.FileInfo info = 1;
}

message DownloadFileRequest {
  string id = 1;
}

message DownloadFileResponse {
 oneof data {
    dataservice.v1.FileInfo info = 1;
    bytes chunk_data = 2;
  };
}
