// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package razeeengine

import (
	"context"
	"github.com/go-logr/logr"
	"github.com/redhat-marketplace/redhat-marketplace-operator/metering/v2/pkg/mailbox"
	"github.com/redhat-marketplace/redhat-marketplace-operator/metering/v2/pkg/processorsenders"
	"github.com/redhat-marketplace/redhat-marketplace-operator/metering/v2/pkg/razee"
	"github.com/redhat-marketplace/redhat-marketplace-operator/metering/v2/pkg/types"
	"github.com/redhat-marketplace/redhat-marketplace-operator/v2/pkg/client"
	"github.com/redhat-marketplace/redhat-marketplace-operator/v2/pkg/managers"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/dynamic"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/rest"
)

// Injectors from wire.go:

func NewEngine(ctx context.Context, namespaces types.Namespaces, scheme *runtime.Scheme, clientOptions managers.ClientOptions, k8sRestConfig *rest.Config, log logr.Logger) (*Engine, error) {
	clientset, err := kubernetes.NewForConfig(k8sRestConfig)
	if err != nil {
		return nil, err
	}
	dynamicInterface, err := dynamic.NewForConfig(k8sRestConfig)
	if err != nil {
		return nil, err
	}
	restMapper, err := managers.NewDynamicRESTMapper(k8sRestConfig)
	if err != nil {
		return nil, err
	}
	dynamicClient := client.NewDynamicClient(dynamicInterface, restMapper)
	findOwnerHelper := client.NewFindOwnerHelper(dynamicClient)
	razeeStore := razee.NewRazeeStore(ctx, log, clientset, findOwnerHelper, scheme)
	razeeStoreRunnable := ProvideRazeeStoreRunnable(clientset, namespaces, razeeStore, log)
	mailboxMailbox := mailbox.ProvideMailbox(log)
	cache, err := managers.ProvideNewCache(k8sRestConfig, restMapper, scheme, clientOptions)
	if err != nil {
		return nil, err
	}
	clientClient, err := managers.ProvideCachedClient(k8sRestConfig, restMapper, scheme, cache, clientOptions)
	if err != nil {
		return nil, err
	}
	razeeProcessor := processorsenders.ProvideRazeeProcessor(log, clientClient, mailboxMailbox, scheme)
	razeeChannelProducer := mailbox.ProvideRazeeChannelProducer(razeeStore, mailboxMailbox, log)
	runnables := ProvideRunnables(razeeStoreRunnable, mailboxMailbox, razeeProcessor, razeeChannelProducer)
	engine := ProvideEngine(razeeStore, namespaces, log, clientset, runnables)
	return engine, nil
}
