// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package server

import (
	"github.com/prometheus-operator/prometheus-operator/pkg/client/versioned/typed/monitoring/v1"
	"github.com/redhat-marketplace/redhat-marketplace-operator/metering/v2/internal/metrics"
	"github.com/redhat-marketplace/redhat-marketplace-operator/metering/v2/pkg/dictionary"
	"github.com/redhat-marketplace/redhat-marketplace-operator/metering/v2/pkg/engine"
	"github.com/redhat-marketplace/redhat-marketplace-operator/metering/v2/pkg/mailbox"
	"github.com/redhat-marketplace/redhat-marketplace-operator/metering/v2/pkg/meterdefinition"
	"github.com/redhat-marketplace/redhat-marketplace-operator/metering/v2/pkg/processors"
	"github.com/redhat-marketplace/redhat-marketplace-operator/v2/apis/marketplace/generated/clientset/versioned/typed/marketplace/v1beta1"
	"github.com/redhat-marketplace/redhat-marketplace-operator/v2/pkg/client"
	"github.com/redhat-marketplace/redhat-marketplace-operator/v2/pkg/managers"
	"github.com/redhat-marketplace/redhat-marketplace-operator/v2/pkg/utils/reconcileutils"
	"k8s.io/client-go/dynamic"
	"k8s.io/client-go/kubernetes"
	"sigs.k8s.io/controller-runtime/pkg/client/config"
)

import (
	_ "k8s.io/client-go/plugin/pkg/client/auth"
)

// Injectors from wire.go:

func NewServer(opts *Options) (*Service, error) {
	restConfig, err := config.GetConfig()
	if err != nil {
		return nil, err
	}
	restMapper, err := managers.NewDynamicRESTMapper(restConfig)
	if err != nil {
		return nil, err
	}
	scheme := provideScheme()
	clientOptions := getClientOptions()
	cache, err := managers.ProvideNewCache(restConfig, restMapper, scheme, clientOptions)
	if err != nil {
		return nil, err
	}
	clientClient, err := managers.ProvideCachedClient(restConfig, restMapper, scheme, cache, clientOptions)
	if err != nil {
		return nil, err
	}
	clientset, err := kubernetes.NewForConfig(restConfig)
	if err != nil {
		return nil, err
	}
	options := ConvertOptions(opts)
	registry := provideRegistry()
	logger := _wireLoggerValue
	clientCommandRunner := reconcileutils.NewClientCommand(clientClient, scheme, logger)
	context := provideContext()
	cacheIsIndexed, err := addIndex(context, cache)
	if err != nil {
		return nil, err
	}
	cacheIsStarted, err := managers.StartCache(context, cache, logger, cacheIsIndexed)
	if err != nil {
		return nil, err
	}
	dynamicInterface, err := dynamic.NewForConfig(restConfig)
	if err != nil {
		return nil, err
	}
	dynamicClient := client.NewDynamicClient(dynamicInterface, restMapper)
	findOwnerHelper := client.NewFindOwnerHelper(dynamicClient)
	monitoringV1Client, err := v1.NewForConfig(restConfig)
	if err != nil {
		return nil, err
	}
	marketplaceV1beta1Client, err := v1beta1.NewForConfig(restConfig)
	if err != nil {
		return nil, err
	}
	namespaces := ProvideNamespaces(opts)
	meterDefinitionList, err := dictionary.ProvideMeterDefinitionList(cacheIsStarted, clientClient)
	if err != nil {
		return nil, err
	}
	meterDefinitionsSeenStore := dictionary.NewMeterDefinitionsSeenStore()
	meterDefinitionDictionary := dictionary.NewMeterDefinitionDictionary(context, clientset, findOwnerHelper, namespaces, logger, meterDefinitionList, meterDefinitionsSeenStore)
	objectsSeenStore := meterdefinition.NewObjectsSeenStore()
	meterDefinitionStore := meterdefinition.NewMeterDefinitionStore(context, logger, clientset, findOwnerHelper, monitoringV1Client, marketplaceV1beta1Client, meterDefinitionDictionary, scheme, objectsSeenStore)
	objectsSeenStoreRunnable := engine.ProvideObjectsSeenStoreRunnable(clientset, namespaces, objectsSeenStore, monitoringV1Client)
	meterDefinitionStoreRunnable := engine.ProvideMeterDefinitionStoreRunnable(clientset, namespaces, meterDefinitionStore, monitoringV1Client)
	meterDefinitionDictionaryStoreRunnable := engine.ProvideMeterDefinitionDictionaryStoreRunnable(clientset, namespaces, marketplaceV1beta1Client, meterDefinitionDictionary)
	meterDefinitionSeenStoreRunnable := engine.ProvideMeterDefinitionSeenStoreRunnable(clientset, namespaces, marketplaceV1beta1Client, meterDefinitionsSeenStore)
	mailboxMailbox := mailbox.ProvideMailbox(logger)
	statusProcessor := processors.ProvideStatusProcessor(logger, clientClient, mailboxMailbox, scheme)
	serviceAnnotatorProcessor := processors.ProvideServiceAnnotatorProcessor(logger, clientClient, mailboxMailbox)
	prometheusData := metrics.ProvidePrometheusData()
	prometheusProcessor := processors.ProvidePrometheusProcessor(logger, clientClient, mailboxMailbox, scheme, prometheusData)
	prometheusMdefProcessor := processors.ProvidePrometheusMdefProcessor(logger, clientClient, mailboxMailbox, scheme, prometheusData)
	objectChannelProducer := mailbox.ProvideObjectChannelProducer(meterDefinitionStore, mailboxMailbox, logger)
	meterDefinitionChannelProducer := mailbox.ProvideMeterDefinitionChannelProducer(meterDefinitionDictionary, mailboxMailbox, logger)
	runnables := engine.ProvideRunnables(objectsSeenStoreRunnable, meterDefinitionStoreRunnable, meterDefinitionDictionaryStoreRunnable, meterDefinitionSeenStoreRunnable, mailboxMailbox, statusProcessor, serviceAnnotatorProcessor, prometheusProcessor, prometheusMdefProcessor, objectChannelProducer, meterDefinitionChannelProducer, meterDefinitionDictionary)
	engineEngine := engine.ProvideEngine(meterDefinitionStore, namespaces, logger, clientset, monitoringV1Client, meterDefinitionDictionary, marketplaceV1beta1Client, runnables)
	service := &Service{
		k8sclient:       clientClient,
		k8sRestClient:   clientset,
		opts:            options,
		cache:           cache,
		metricsRegistry: registry,
		cc:              clientCommandRunner,
		indexed:         cacheIsIndexed,
		started:         cacheIsStarted,
		engine:          engineEngine,
		prometheusData:  prometheusData,
	}
	return service, nil
}

var (
	_wireLoggerValue = log
)
