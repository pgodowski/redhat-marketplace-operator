// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package reporter

import (
	"context"
	"github.com/redhat-marketplace/redhat-marketplace-operator/v2/pkg/managers"
	"github.com/redhat-marketplace/redhat-marketplace-operator/v2/pkg/prometheus"
	"github.com/redhat-marketplace/redhat-marketplace-operator/v2/pkg/utils/reconcileutils"
	"sigs.k8s.io/controller-runtime/pkg/client/config"
)

// Injectors from wire.go:

func NewTask(ctx context.Context, reportName ReportName, taskConfig *Config) (*Task, error) {
	restConfig, err := config.GetConfig()
	if err != nil {
		return nil, err
	}
	restMapper, err := managers.NewDynamicRESTMapper(restConfig)
	if err != nil {
		return nil, err
	}
	scheme := provideScheme()
	simpleClient, err := managers.ProvideSimpleClient(restConfig, restMapper, scheme)
	if err != nil {
		return nil, err
	}
	logrLogger := _wireLoggerValue
	clientCommandRunner := reconcileutils.NewClientCommand(simpleClient, scheme, logrLogger)
	uploaders, err := ProvideUploaders(ctx, clientCommandRunner, logrLogger, taskConfig)
	if err != nil {
		return nil, err
	}
	task := &Task{
		ReportName: reportName,
		CC:         clientCommandRunner,
		K8SClient:  simpleClient,
		Ctx:        ctx,
		Config:     taskConfig,
		K8SScheme:  scheme,
		Uploaders:  uploaders,
	}
	return task, nil
}

var (
	_wireLoggerValue = logger
)

func NewReporter(task *Task) (*MarketplaceReporter, error) {
	reporterConfig := task.Config
	contextContext := task.Ctx
	simpleClient := task.K8SClient
	scheme := task.K8SScheme
	logrLogger := _wireLogrLoggerValue
	clientCommandRunner := reconcileutils.NewClientCommand(simpleClient, scheme, logrLogger)
	reportName := task.ReportName
	meterReport, err := getMarketplaceReport(contextContext, clientCommandRunner, reportName)
	if err != nil {
		return nil, err
	}
	marketplaceConfig, err := getMarketplaceConfig(contextContext, clientCommandRunner)
	if err != nil {
		return nil, err
	}
	service, err := getPrometheusService(contextContext, meterReport, clientCommandRunner, reporterConfig)
	if err != nil {
		return nil, err
	}
	servicePort, err := getPrometheusPort(reporterConfig, service)
	if err != nil {
		return nil, err
	}
	prometheusAPISetup := providePrometheusSetup(reporterConfig, meterReport, service, servicePort)
	prometheusAPI, err := prometheus.NewPrometheusAPIForReporter(prometheusAPISetup)
	if err != nil {
		return nil, err
	}
	v, err := getMeterDefinitionReferences(contextContext, meterReport, simpleClient)
	if err != nil {
		return nil, err
	}
	marketplaceReporter, err := NewMarketplaceReporter(reporterConfig, meterReport, marketplaceConfig, prometheusAPI, v)
	if err != nil {
		return nil, err
	}
	return marketplaceReporter, nil
}

var (
	_wireLogrLoggerValue = logger
)

func NewUploadTask(ctx context.Context, config2 *Config) (*UploadTask, error) {
	restConfig, err := config.GetConfig()
	if err != nil {
		return nil, err
	}
	restMapper, err := managers.NewDynamicRESTMapper(restConfig)
	if err != nil {
		return nil, err
	}
	scheme := provideScheme()
	simpleClient, err := managers.ProvideSimpleClient(restConfig, restMapper, scheme)
	if err != nil {
		return nil, err
	}
	logrLogger := _wireLoggerValue2
	clientCommandRunner := reconcileutils.NewClientCommand(simpleClient, scheme, logrLogger)
	downloader, err := ProvideDownloader(ctx, clientCommandRunner, logrLogger, config2)
	if err != nil {
		return nil, err
	}
	uploaders, err := ProvideUploaders(ctx, clientCommandRunner, logrLogger, config2)
	if err != nil {
		return nil, err
	}
	admin, err := ProvideAdmin(ctx, clientCommandRunner, logrLogger, config2)
	if err != nil {
		return nil, err
	}
	uploadTask := &UploadTask{
		K8SClient:  simpleClient,
		Ctx:        ctx,
		Config:     config2,
		K8SScheme:  scheme,
		Downloader: downloader,
		Uploaders:  uploaders,
		Admin:      admin,
	}
	return uploadTask, nil
}

var (
	_wireLoggerValue2 = logger
)

func NewReconcileTask(ctx context.Context, config2 *Config, namespace Namespace) (*ReconcileTask, error) {
	restConfig, err := config.GetConfig()
	if err != nil {
		return nil, err
	}
	restMapper, err := managers.NewDynamicRESTMapper(restConfig)
	if err != nil {
		return nil, err
	}
	scheme := provideScheme()
	simpleClient, err := managers.ProvideSimpleClient(restConfig, restMapper, scheme)
	if err != nil {
		return nil, err
	}
	reconcileTask := &ReconcileTask{
		K8SClient: simpleClient,
		Config:    config2,
		K8SScheme: scheme,
		Namespace: namespace,
	}
	return reconcileTask, nil
}
