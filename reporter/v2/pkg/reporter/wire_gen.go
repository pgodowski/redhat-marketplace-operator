// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package reporter

import (
	"context"
	"github.com/redhat-marketplace/redhat-marketplace-operator/reporter/v2/pkg/dataservice"
	"github.com/redhat-marketplace/redhat-marketplace-operator/v2/pkg/managers"
	"github.com/redhat-marketplace/redhat-marketplace-operator/v2/pkg/prometheus"
	"github.com/redhat-marketplace/redhat-marketplace-operator/v2/pkg/utils/reconcileutils"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/tools/record"
	"sigs.k8s.io/controller-runtime/pkg/client/config"
)

// Injectors from wire.go:

func NewTask(ctx context.Context, reportName ReportName, taskConfig *Config) (*Task, error) {
	restConfig, err := config.GetConfig()
	if err != nil {
		return nil, err
	}
	restMapper, err := managers.NewDynamicRESTMapper(restConfig)
	if err != nil {
		return nil, err
	}
	scheme := provideScheme()
	simpleClient, err := managers.ProvideSimpleClient(restConfig, restMapper, scheme)
	if err != nil {
		return nil, err
	}
	logrLogger := _wireLoggerValue
	clientCommandRunner := reconcileutils.NewClientCommand(simpleClient, scheme, logrLogger)
	uploaders, err := ProvideUploaders(ctx, clientCommandRunner, simpleClient, logrLogger, taskConfig)
	if err != nil {
		return nil, err
	}
	uploader, err := ProvideUploader(uploaders)
	if err != nil {
		return nil, err
	}
	task := &Task{
		ReportName: reportName,
		CC:         clientCommandRunner,
		K8SClient:  simpleClient,
		Config:     taskConfig,
		K8SScheme:  scheme,
		Uploader:   uploader,
	}
	return task, nil
}

var (
	_wireLoggerValue = logger
)

func NewEventBroadcaster(erConfig *Config) (record.EventBroadcaster, func(), error) {
	restConfig, err := config.GetConfig()
	if err != nil {
		return nil, nil, err
	}
	clientset, err := kubernetes.NewForConfig(restConfig)
	if err != nil {
		return nil, nil, err
	}
	eventBroadcaster, cleanup := provideReporterEventBroadcaster(clientset)
	return eventBroadcaster, func() {
		cleanup()
	}, nil
}

func NewReporter(ctx context.Context, task *Task) (*MarketplaceReporter, error) {
	reporterConfig := task.Config
	simpleClient := task.K8SClient
	scheme := task.K8SScheme
	logrLogger := _wireLogrLoggerValue
	clientCommandRunner := reconcileutils.NewClientCommand(simpleClient, scheme, logrLogger)
	reportName := task.ReportName
	meterReport, err := getMarketplaceReport(ctx, clientCommandRunner, reportName)
	if err != nil {
		return nil, err
	}
	marketplaceConfig, err := getMarketplaceConfig(ctx, clientCommandRunner)
	if err != nil {
		return nil, err
	}
	service, err := getPrometheusService(ctx, meterReport, clientCommandRunner, reporterConfig)
	if err != nil {
		return nil, err
	}
	servicePort, err := getPrometheusPort(reporterConfig, service)
	if err != nil {
		return nil, err
	}
	prometheusAPISetup := providePrometheusSetup(reporterConfig, meterReport, service, servicePort)
	prometheusAPI, err := prometheus.NewPrometheusAPIForReporter(prometheusAPISetup)
	if err != nil {
		return nil, err
	}
	v, err := getMeterDefinitionReferences(ctx, meterReport, simpleClient)
	if err != nil {
		return nil, err
	}
	dataBuilder, err := ProvideDataBuilder(reporterConfig, logrLogger)
	if err != nil {
		return nil, err
	}
	reportWriter, err := ProvideWriter(reporterConfig, marketplaceConfig, logrLogger)
	if err != nil {
		return nil, err
	}
	marketplaceReporter, err := NewMarketplaceReporter(reporterConfig, meterReport, marketplaceConfig, prometheusAPI, v, dataBuilder, reportWriter)
	if err != nil {
		return nil, err
	}
	return marketplaceReporter, nil
}

var (
	_wireLogrLoggerValue = logger
)

func NewUploadTask(ctx context.Context, config2 *Config, namespace Namespace) (*UploadTask, error) {
	logrLogger := _wireLoggerValue2
	restConfig, err := config.GetConfig()
	if err != nil {
		return nil, err
	}
	restMapper, err := managers.NewDynamicRESTMapper(restConfig)
	if err != nil {
		return nil, err
	}
	scheme := provideScheme()
	simpleClient, err := managers.ProvideSimpleClient(restConfig, restMapper, scheme)
	if err != nil {
		return nil, err
	}
	dataServiceConfig, err := provideDataServiceConfig(config2)
	if err != nil {
		return nil, err
	}
	dataService, err := dataservice.NewDataService(dataServiceConfig)
	if err != nil {
		return nil, err
	}
	clientCommandRunner := reconcileutils.NewClientCommand(simpleClient, scheme, logrLogger)
	uploaders, err := ProvideUploaders(ctx, clientCommandRunner, simpleClient, logrLogger, config2)
	if err != nil {
		return nil, err
	}
	uploadTask := &UploadTask{
		logger:      logrLogger,
		config:      config2,
		k8SClient:   simpleClient,
		k8SScheme:   scheme,
		fileStorage: dataService,
		uploaders:   uploaders,
	}
	return uploadTask, nil
}

var (
	_wireLoggerValue2 = logger
)

func NewReconcileTask(ctx context.Context, config2 *Config, broadcaster record.EventBroadcaster, namespace Namespace) (*ReconcileTask, error) {
	logrLogger := _wireLoggerValue3
	restConfig, err := config.GetConfig()
	if err != nil {
		return nil, err
	}
	restMapper, err := managers.NewDynamicRESTMapper(restConfig)
	if err != nil {
		return nil, err
	}
	scheme := provideScheme()
	simpleClient, err := managers.ProvideSimpleClient(restConfig, restMapper, scheme)
	if err != nil {
		return nil, err
	}
	eventRecorder := provideReporterEventRecorder(broadcaster, scheme)
	uploadTask, err := NewUploadTask(ctx, config2, namespace)
	if err != nil {
		return nil, err
	}
	reconcileTask := &ReconcileTask{
		logger:     logrLogger,
		K8SClient:  simpleClient,
		Config:     config2,
		K8SScheme:  scheme,
		Namespace:  namespace,
		recorder:   eventRecorder,
		UploadTask: uploadTask,
	}
	return reconcileTask, nil
}

var (
	_wireLoggerValue3 = logger
)
