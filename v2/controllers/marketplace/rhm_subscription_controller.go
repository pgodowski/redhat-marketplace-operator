// Copyright 2020 IBM Corp.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package marketplace

import (
	"context"

	"sigs.k8s.io/controller-runtime/pkg/builder"

	"github.com/go-logr/logr"
	olmv1alpha1 "github.com/operator-framework/api/pkg/operators/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/event"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
	"sigs.k8s.io/controller-runtime/pkg/reconcile"
)

// Name of the Red Hat Marketplace operator
const rhmOperatorName = "redhat-marketplace-operator"

// Labels used by IBM Common Services Operand Deployment Lifecycle Manager (ODLM)
const opreqControlLabel string = "operator.ibm.com/opreq-control"
const doNotUninstallLabel string = "operator.ibm.com/opreq-do-not-uninstall"

// blank assignment to verify that RHMSubscriptionController implements reconcile.Reconciler
var _ reconcile.Reconciler = &RHMSubscriptionController{}

// RHMSubscriptionController reconciles a Subscription object
type RHMSubscriptionController struct {
	// This Client, initialized using mgr.Client() above, is a split Client
	// that reads objects from the cache and writes to the apiserver
	Client client.Client
	Scheme *runtime.Scheme
	Log    logr.Logger
}

// add adds a new Controller to mgr with r as the reconcile.Reconciler
func (r *RHMSubscriptionController) SetupWithManager(mgr manager.Manager) error {
	// Events are generated by a source.Source and transformed into a reconcile.Request by an handler.EventHandler.
	// Events will be passed to the EventHandler if all provided Predicates evaluate to true.
	labelPreds := []predicate.Predicate{
		predicate.Funcs{
			UpdateFunc: func(evt event.UpdateEvent) bool {
				return r.checkForRhmSubscription(evt.MetaNew)
			},
			CreateFunc: func(evt event.CreateEvent) bool {
				return r.checkForRhmSubscription(evt.Meta)
			},
			DeleteFunc: func(evt event.DeleteEvent) bool {
				return false
			},
			GenericFunc: func(evt event.GenericEvent) bool {
				return r.checkForRhmSubscription(evt.Meta)
			},
		},
	}

	return ctrl.NewControllerManagedBy(mgr).
		For(&olmv1alpha1.Subscription{}, builder.WithPredicates(labelPreds...)).
		Complete(r)
}

// +kubebuilder:rbac:groups="operators.coreos.com",resources=subscriptions,verbs=get;list;watch;update;patch

// Reconcile reads the state of the cluster for a Subscription object
// and makes changes based on the state read and what is in the Subscription.Spec
func (r *RHMSubscriptionController) Reconcile(request reconcile.Request) (reconcile.Result, error) {
	reqLogger := r.Log.WithValues("Request.Namespace", request.Namespace, "Request.Name", request.Name)
	reqLogger.Info("Reconciling RHM Subscription")

	// Fetch the Subscription instance
	instance := &olmv1alpha1.Subscription{}
	err := r.Client.Get(context.TODO(), request.NamespacedName, instance)
	if err != nil {
		if errors.IsNotFound(err) {
			// Request object not found, could have been deleted after reconcile request.
			// Owned objects are automatically garbage collected. For additional cleanup logic use finalizers.
			// Return and don't requeue
			return reconcile.Result{}, nil
		}
		// Error reading the object - requeue the request.
		return reconcile.Result{}, err
	}

	reqLogger.Info("Got Subscription instance", "Name", instance.ObjectMeta.Name)

	// add the doNotUninstall label. if the label already existed,
	// predicate.Funcs would have prevented us from getting this far.
	updatedSubscription := instance.DeepCopy()
	labels := updatedSubscription.GetLabels()
	labels[doNotUninstallLabel] = "true"
	updatedSubscription.SetLabels(labels)
	if err := r.Client.Update(context.TODO(), updatedSubscription); err != nil {
		reqLogger.Error(err, "Failed to update RHM subscription with doNotUninstall label")
		return reconcile.Result{}, err
	}
	reqLogger.Info("Updated RHM subscription with doNotUninstall label")

	reqLogger.Info("Reconcilation complete")
	return reconcile.Result{}, nil
}

// Determine if a Subscription event is for the RHM operator and if it needs the doNotUninstall label
func (r *RHMSubscriptionController) checkForRhmSubscription(meta metav1.Object) bool {
	reqLogger := r.Log.WithValues("func", "checkForRhmSubscription")
	if meta.GetName() != rhmOperatorName {
		// the subscription event is not for the RHM operator, so ignore it
		return false
	}
	reqLogger.Info("Found RHM subscription", "Name", rhmOperatorName)

	// if the subscription is managed by ODLM (opreqControlLabel == true),
	// add the doNotUninstall label if the label doesn't exist.
	controlLabelValue, fndControlLabel := meta.GetLabels()[opreqControlLabel]
	uninstallLabelValue, fndUninstallLabel := meta.GetLabels()[doNotUninstallLabel]
	if fndControlLabel && controlLabelValue == "true" {
		if !fndUninstallLabel || (fndUninstallLabel && uninstallLabelValue != "true") {
			reqLogger.Info("Need to add doNotUninstall label to RHM subscription")
			return true
		} else {
			reqLogger.Info("RHM subscription already has the doNotUninstall label")
			return false
		}
	}
	return false
}
