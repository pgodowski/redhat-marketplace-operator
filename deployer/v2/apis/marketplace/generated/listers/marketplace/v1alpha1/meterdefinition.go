/*
Copyright 2020 IBM Co..

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/redhat-marketplace/redhat-marketplace-operator/v2/apis/marketplace/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MeterDefinitionLister helps list MeterDefinitions.
// All objects returned here must be treated as read-only.
type MeterDefinitionLister interface {
	// List lists all MeterDefinitions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MeterDefinition, err error)
	// MeterDefinitions returns an object that can list and get MeterDefinitions.
	MeterDefinitions(namespace string) MeterDefinitionNamespaceLister
	MeterDefinitionListerExpansion
}

// meterDefinitionLister implements the MeterDefinitionLister interface.
type meterDefinitionLister struct {
	indexer cache.Indexer
}

// NewMeterDefinitionLister returns a new MeterDefinitionLister.
func NewMeterDefinitionLister(indexer cache.Indexer) MeterDefinitionLister {
	return &meterDefinitionLister{indexer: indexer}
}

// List lists all MeterDefinitions in the indexer.
func (s *meterDefinitionLister) List(selector labels.Selector) (ret []*v1alpha1.MeterDefinition, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MeterDefinition))
	})
	return ret, err
}

// MeterDefinitions returns an object that can list and get MeterDefinitions.
func (s *meterDefinitionLister) MeterDefinitions(namespace string) MeterDefinitionNamespaceLister {
	return meterDefinitionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MeterDefinitionNamespaceLister helps list and get MeterDefinitions.
// All objects returned here must be treated as read-only.
type MeterDefinitionNamespaceLister interface {
	// List lists all MeterDefinitions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MeterDefinition, err error)
	// Get retrieves the MeterDefinition from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MeterDefinition, error)
	MeterDefinitionNamespaceListerExpansion
}

// meterDefinitionNamespaceLister implements the MeterDefinitionNamespaceLister
// interface.
type meterDefinitionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MeterDefinitions in the indexer for a given namespace.
func (s meterDefinitionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MeterDefinition, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MeterDefinition))
	})
	return ret, err
}

// Get retrieves the MeterDefinition from the indexer for a given namespace and name.
func (s meterDefinitionNamespaceLister) Get(name string) (*v1alpha1.MeterDefinition, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("meterdefinition"), name)
	}
	return obj.(*v1alpha1.MeterDefinition), nil
}
