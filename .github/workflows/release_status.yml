# Generated by internal/ci/ci_tool.cue; do not edit
name: Publish Status
on:
  schedule:
  - cron: '*/15 * * * *'
jobs:
  prs:
    name: Get release PRs
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix}}
      emptymatrix: ${{ steps.set-matrix.outputs.emptymatrix}}
    defaults:
      run:
        shell: bash
    steps:
    - id: findAllReleasePRs
      uses: octokit/graphql-action@v2.x
      with:
        query: |-
          query {
          	search(query: "repo:redhat-marketplace/redhat-marketplace-operator is:pr is:open head:hotfix head:release base:master label:ready", type: ISSUE, last: 100) {
          		edges {
          			node {
          				... on PullRequest {
          					id
          					number
          					baseRefName
          					headRefName
          				}
          			}
          		}
          	}
          }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - id: set-matrix
      run: |-
        OUTPUT='${{ steps.findAllReleasePRs.outputs.data }}'
        EMPTY=$(echo $OUTPUT | jq -cr '.search.edges | length == 0')
        OUTPUT=$(echo $OUTPUT | jq -cr '[.search.edges[].node]' 2> /dev/null) || echo '[]'
        echo "::set-output name=emptymatrix::$EMPTY"
        echo "::set-output name=matrix::{\"include\":$OUTPUT}"
  status:
    name: Check publish status
    needs:
    - prs
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    if: ${{ needs.prs.outputs.emptymatrix == 'false' }}
    steps:
    - id: pr
      name: Get PR for Comment
      run: |-
        PR=$(curl -H "Accept: application/vnd.github.v3+json" \
             "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/pulls/${{ matrix.number }}" )
        echo "::set-output name=prSha::$(echo $PR | jq -r ".head.sha")"
        echo "::set-output name=prRef::$(echo $PR | jq -r ".head.ref")"
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ steps.pr.outputs.prSha }}
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16.15
    - name: Cache Go modules
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ github.sha }}
        restore-keys: ${{ runner.os }}-go-
    - name: Install Kubebuilder
      run: |-
        os=$(go env GOOS)
        arch=$(go env GOARCH)
        version=2.3.2

        # download kubebuilder and extract it to tmp
        # https://github.com/kubernetes-sigs/kubebuilder/releases/download/v3.1.0/kubebuilder_darwin_amd64
        # https://github.com/kubernetes-sigs/kubebuilder/releases/download/v2.3.1/kubebuilder_2.3.1_darwin_amd64.tar.gz
        # 3.0 + versions will not be tar.gz
        curl -L https://github.com/kubernetes-sigs/kubebuilder/releases/download/v${version}/kubebuilder_${version}_${os}_${arch}.tar.gz | tar -xz -C /tmp/

        # move to a long-term location and put it on your path
        # (you'll need to set the KUBEBUILDER_ASSETS env var if you put it somewhere else)
        sudo mv /tmp/kubebuilder_${version}_${os}_${arch} /usr/local/kubebuilder
        echo "/usr/local/kubebuilder/bin" >> $GITHUB_PATH
    - id: version
      name: Get Version
      run: |-
        make svu
        export VERSION="$(./bin/svu next --prefix '')"

        if [ "$REF" == "" ]; then
        	REF="$GITHUB_REF"
        fi

        if [[ "$GITHUB_HEAD_REF" != "" ]]; then
        	echo "Request is a PR $GITHUB_HEAD_REF is head; is base $GITHUB_BASE_REF is base"
        	REF="$GITHUB_HEAD_REF"
        fi

        echo "Found ref $REF"

        if [[ "$VERSION" == "" ]]; then
        	echo "failed to find version"
        	exit 1
        fi

        if [[ "$REF" == *"release"* ||  "$REF" == *"hotfix"* || "$REF" == *"refs/head/master"* || "$REF" == *"refs/head/develop"* ]] ; then
        echo "using release version and github_run_number"
        export VERSION=${VERSION}-${GITHUB_RUN_NUMBER}
        export TAG="${VERSION}"
        export IS_DEV="false"
        else
        echo "using beta in version"
        export VERSION=${VERSION}-beta.${GITHUB_RUN_NUMBER}
        export TAG="${VERSION}"
        export IS_DEV="true"
        fi

        echo "Found version $VERSION"
        echo "::set-output name=version::$VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Found tag $TAG"
        echo "TAG=$TAG" >> $GITHUB_ENV
        echo "::set-output name=tag::$TAG"
        echo "IS_DEV=$IS_DEV" >> $GITHUB_ENV
        echo "::set-output name=isDev::$IS_DEV"
        echo "REF=$REF" >> $GITHUB_ENV
      env:
        REF: ${{ steps.pr.outputs.prRef }}
    - name: Get Latest Bundle Run
      run: |-
        WORKFLOW_ID=8480641
        BRANCH_BUILD=$(curl \
          -H "Accept: application/vnd.github.v3+json" \
          "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/actions/workflows/$WORKFLOW_ID/runs?branch=$REF&event=push" \
           | jq '.workflow_runs | max_by(.run_number)')

        if [ "$BRANCH_BUILD" == "" ]; then
          echo "failed to get branch build"
          exit 1
        fi

        status=$(echo $BRANCH_BUILD | jq -r ' pffastatus')
        conclusion=$(echo $BRANCH_BUILD | jq -r '.conclusion')

        if [ "$status" != "completed" ] && [ "$conclusion" != "success" ]; then
          echo "$status and $conclusion were not completed and successful"
          exit 1
        fi

        RUN_NUMBER=$(echo $BRANCH_BUILD | jq -r '.run_number')

        export TAG="${VERSION}-${RUN_NUMBER}"
        echo "setting tag to $TAG"
        echo "TAG=$TAG" >> $GITHUB_ENV
    - name: Checkout code
      uses: actions/checkout@v2
    - id: operatorImageStatuses
      name: Fetch Operator Image Statuses
      run: |-
        make pc-tool
        OUTPUT=$(./bin/partner-connect-tool status --username $RH_USER --password $RH_PASSWORD --images https://connect.redhat.com/projects/5e98b6fac77ce6fca8ac859c/images,,$TAG --images https://connect.redhat.com/projects/5e98b6fc32116b90fd024d06/images,,$TAG --images https://connect.redhat.com/projects/5f36ea2f74cc50b8f01a838d/images,,$TAG --images https://connect.redhat.com/projects/5f62b71018e80cdc21edf22f/images,,$TAG --images https://connect.redhat.com/projects/61649f78d3e2f8d3bcfe30d5/images,,$TAG --images https://connect.redhat.com/projects/5f68c9457115dbd1183ccab6/images,,$TAG)
        echo "::set-output name=imageStatus::$OUTPUT"
      env:
        RH_USER: ${{ secrets['REDHAT_IO_USER'] }}
        RH_PASSWORD: ${{ secrets['REDHAT_IO_PASSWORD'] }}
        RH_CONNECT_TOKEN: ${{ secrets.redhat_api_key }}
    - id: pretty
      name: Format output
      run: .github/workflows/scripts/process_pc_status.sh '${{ steps.operatorImageStatuses.outputs.imageStatus
        }}'
    - name: Post comment
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        header: imagestatus
        recreate: "true"
        number: ${{ matrix.number }}
        message: |-
          ## RH PC Status for tag: ${{ env.TAG }}

          ${{env.MD_TABLE}}
    strategy:
      matrix: ${{fromJson(needs.prs.outputs.matrix)}}
