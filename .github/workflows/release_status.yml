# Generated by internal/ci/ci_tool.cue; do not edit
name: Publish Status
on:
  schedule:
  - cron: '*/15 * * * *'
jobs:
  prs:
    name: Get release PRs
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix}}
    defaults:
      run:
        shell: bash
    steps:
    - id: findAllReleasePRs
      uses: octokit/graphql-action@v2.x
      with:
        query: |-
          query pr($varq: String!) {
          	search(query: $varq, type: ISSUE, last: 100) {
          		edges {
          			node {
          				... on PullRequest {
          					id
          					number
          					baseRefName
          					headRefName
          				}
          			}
          		}
          	}
          }
        varq: repo:${{ env.GITHUB_REPOSITORY }} is:pr is:open head:hotfix head:release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - id: set-matrix
      run: |-
        OUTPUT=$(echo ${{steps.findAllReleasePRS.outputs.data}} | jq -cr '[.data.search.edges[].node]' )
        echo "::set-output name=matrix::{"include":$OUTPUT}"
  status:
    name: Check publish status
    needs:
    - prs
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    steps:
    - id: pr
      name: Get PR for Comment
      run: |-
        PR=$(curl -H "Accept: application/vnd.github.v3+json" \
             "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/pulls/${{ matrix.number }}" )
        echo "::set-output name=prSha::$(echo $PR | jq -r ".head.sha")"
        echo "::set-output name=prRef::$(echo $PR | jq -r ".head.ref")"
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ steps.pr.outputs.prSha }}
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16.2
    - name: Cache Go modules
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ github.sha }}
        restore-keys: ${{ runner.os }}-go-
    - name: Install Kubebuilder
      run: |-
        os=$(go env GOOS)
        arch=$(go env GOARCH)
        version=2.3.1

        # download kubebuilder and extract it to tmp
        curl -L https://go.kubebuilder.io/dl/${version}/${os}/${arch} | tar -xz -C /tmp/

        # move to a long-term location and put it on your path
        # (you'll need to set the KUBEBUILDER_ASSETS env var if you put it somewhere else)
        sudo mv /tmp/kubebuilder_${version}_${os}_${arch} /usr/local/kubebuilder
        echo "/usr/local/kubebuilder/bin" >> $GITHUB_PATH
    - name: Install operatorsdk
      run: |-
        export ARCH=$(case $(arch) in x86_64) echo -n amd64 ;; aarch64) echo -n arm64 ;; *) echo -n $(arch) ;; esac)
        export OS=$(uname | awk '{print tolower($0)}')
        export OPERATOR_SDK_DL_URL=https://github.com/operator-framework/operator-sdk/releases/latest/download
        curl -LO ${OPERATOR_SDK_DL_URL}/operator-sdk_${OS}_${ARCH}
        curl -LO ${OPERATOR_SDK_DL_URL}/checksums.txt
        curl -LO ${OPERATOR_SDK_DL_URL}/checksums.txt.asc
        grep operator-sdk_${OS}_${ARCH} checksums.txt | sha256sum -c -
        chmod +x operator-sdk_${OS}_${ARCH} && sudo mv operator-sdk_${OS}_${ARCH} /usr/local/bin/operator-sdk
        curl -LO https://github.com/operator-framework/operator-registry/releases/download/v1.15.3/${OS}-${ARCH}-opm
        chmod +x ${OS}-${ARCH}-opm && sudo mv ${OS}-${ARCH}-opm /usr/local/bin/opm
    - id: version
      name: Get Version
      run: |-
        make svu
        export VERSION="$(./bin/svu next)"

        if [ "$REF" == "" ]; then
        	REF="$GITHUB_REF"
        fi

        if [[ "$GITHUB_HEAD_REF" != "" ]]; then
        	echo "Request is a PR $GITHUB_HEAD_REF is head; is base $GITHUB_BASE_REF is base"
          REF="$GITHUB_HEAD_REF"
        fi

        echo "Found ref $REF"

        if [[ "$VERSION" == "" ]]; then
          echo "failed to find version"
          exit 1
        fi

        if [[ "$REF" == *"release"* ||  "$REF" == *"hotfix"* ]] ; then
        echo "using release version and github_run_number"
        export TAG="${VERSION}-${GITHUB_RUN_NUMBER}"
        export IS_DEV="false"
        else
        echo "using beta in version"
        export TAG="${VERSION}-beta-${GITHUB_RUN_NUMBER}"
        export IS_DEV="true"
        fi

        echo "Found version $VERSION"
        echo "::set-output name=version::$VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Found tag $TAG"
        echo "TAG=$TAG" >> $GITHUB_ENV
        echo "::set-output name=tag::$TAG"
        echo "IS_DEV=$IS_DEV" >> $GITHUB_ENV
        echo "::set-output name=isDev::$IS_DEV"
        echo "REF=$REF" >> $GITHUB_ENV
      env:
        REF: ${{ steps.pr.outputs.prRef }}
    - name: Checkout code
      uses: actions/checkout@v2
    - id: operatorImageStatuses
      name: Publish Operator Images
      run: |-
        make pc-tool
        OUTPUT=$(./bin/partner-connect-tool status $(.github/workflows/scripts/get_images.sh $TAG))
        echo "::set-output name=imageStatus::$OUTPUT"
      env:
        RH_USER: ${{ secrets['REDHAT_IO_USER'] }}
        RH_PASSWORD: ${{ secrets['REDHAT_IO_PASSWORD'] }}
        RH_CONNECT_TOKEN: ${{ secrets.redhat_api_key }}
    - id: pretty
      run: |-
        results='${{ steps.operatorImageStatuses.outputs.imageStatus }}'
        pushed=$(echo $results | jq '[.[] | length == 12'))

        table="|Image | Certification Status | Publish Status |
        "
        table+="|:--:|:--:|:--:|
        "
        table+=$(echo $results | jq '[.[] | "|[" + .name + ":" + .tags[0] + "](" + .url + ")|" + .certification_status + "|" + .publish_status + "|"] | join("
        ")')
        all_published=$(echo $results | jq '[.[] | select(.publish_status != "Published")] | length == 0'))
        all_passed=$(echo $results | jq '[.[] | select(.certification_status != "Passed")] | length == 0'))
        echo "::set-output name=table:$table"
        echo "::set-output name=all_published:$all_published"
        echo "::set-output name=all_passed:$all_passed"
        echo "::set-output name=pushed:$pushed"
    - uses: marocchino/sticky-pull-request-comment@v2
      with:
        header: imagestatus
        recreate: "true"
        message: |-
          ## RH PC Status for tag: ${{ env.TAG }}

          * Images are pushed? ${{ steps.pretty.outputs.pushed }}
          * Ready to publish images? ${{ steps.pretty.outputs.all_passed }}
          * Ready to publish operator? ${{ steps.pretty.outputs.all_published }}

          ${{steps.pretty.outputs.table}}
    strategy:
      matrix: ${{fromJson(needs.prs.outputs.matrix)}}
