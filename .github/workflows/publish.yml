# Generated by internal/ci/ci_tool.cue; do not edit
name: Publish
on:
- issue_comment
env:
  DOCKER_CLI_EXPERIMENTAL: enabled
jobs:
  push:
    name: Push Images to PC
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    if: ${{ github.event.issue.pull_request && startsWith(github.event.comment.body,
      '/push') }}
    steps:
    - name: Check if user has write access
      uses: lannonbr/repo-permission-check-action@2.0.0
      with:
        permission: write
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - id: pr
      name: Get PR for Comment
      run: |-
        PR=$(curl -H "Accept: application/vnd.github.v3+json" \
             "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/pulls/${{ github.event.issue.number }}" )
        echo "::set-output name=prSha::$(echo $PR | jq -r ".head.sha")"
        echo "::set-output name=prRef::$(echo $PR | jq -r ".head.ref")"
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ steps.pr.outputs.prSha }}
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16.7
    - name: Cache Go modules
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ github.sha }}
        restore-keys: ${{ runner.os }}-go-
    - name: Install Kubebuilder
      run: |-
        os=$(go env GOOS)
        arch=$(go env GOARCH)
        version=2.3.2

        # download kubebuilder and extract it to tmp
        # https://github.com/kubernetes-sigs/kubebuilder/releases/download/v3.1.0/kubebuilder_darwin_amd64
        # https://github.com/kubernetes-sigs/kubebuilder/releases/download/v2.3.1/kubebuilder_2.3.1_darwin_amd64.tar.gz
        # 3.0 + versions will not be tar.gz
        curl -L https://github.com/kubernetes-sigs/kubebuilder/releases/download/v${version}/kubebuilder_${version}_${os}_${arch}.tar.gz | tar -xz -C /tmp/

        # move to a long-term location and put it on your path
        # (you'll need to set the KUBEBUILDER_ASSETS env var if you put it somewhere else)
        sudo mv /tmp/kubebuilder_${version}_${os}_${arch} /usr/local/kubebuilder
        echo "/usr/local/kubebuilder/bin" >> $GITHUB_PATH
    - name: Install operatorsdk
      run: |-
        version=v1.7.2
        export ARCH=$(case $(arch) in x86_64) echo -n amd64 ;; aarch64) echo -n arm64 ;; *) echo -n $(arch) ;; esac)
        export OS=$(uname | awk '{print tolower($0)}')
        export OPERATOR_SDK_DL_URL=https://github.com/operator-framework/operator-sdk/releases/download/${version}
        curl -LO ${OPERATOR_SDK_DL_URL}/operator-sdk_${OS}_${ARCH}
        curl -LO ${OPERATOR_SDK_DL_URL}/checksums.txt
        curl -LO ${OPERATOR_SDK_DL_URL}/checksums.txt.asc
        grep operator-sdk_${OS}_${ARCH} checksums.txt | sha256sum -c -
        chmod +x operator-sdk_${OS}_${ARCH} && sudo mv operator-sdk_${OS}_${ARCH} /usr/local/bin/operator-sdk
        curl -LO https://github.com/operator-framework/operator-registry/releases/download/v1.15.3/${OS}-${ARCH}-opm
        chmod +x ${OS}-${ARCH}-opm && sudo mv ${OS}-${ARCH}-opm /usr/local/bin/opm
    - id: version
      name: Get Version
      run: |-
        make svu
        export VERSION="$(./bin/svu next)"

        if [ "$REF" == "" ]; then
        	REF="$GITHUB_REF"
        fi

        if [[ "$GITHUB_HEAD_REF" != "" ]]; then
        	echo "Request is a PR $GITHUB_HEAD_REF is head; is base $GITHUB_BASE_REF is base"
          REF="$GITHUB_HEAD_REF"
        fi

        echo "Found ref $REF"

        if [[ "$VERSION" == "" ]]; then
          echo "failed to find version"
          exit 1
        fi

        if [[ "$REF" == *"release"* ||  "$REF" == *"hotfix"* ]] ; then
        echo "using release version and github_run_number"
        export TAG="${VERSION}-${GITHUB_RUN_NUMBER}"
        export IS_DEV="false"
        else
        echo "using beta in version"
        export TAG="${VERSION}-beta-${GITHUB_RUN_NUMBER}"
        export IS_DEV="true"
        fi

        echo "Found version $VERSION"
        echo "::set-output name=version::$VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Found tag $TAG"
        echo "TAG=$TAG" >> $GITHUB_ENV
        echo "::set-output name=tag::$TAG"
        echo "IS_DEV=$IS_DEV" >> $GITHUB_ENV
        echo "::set-output name=isDev::$IS_DEV"
        echo "REF=$REF" >> $GITHUB_ENV
      env:
        REF: ${{ steps.pr.outputs.prRef }}
    - name: Get Latest Bundle Run
      run: |-
        WORKFLOW_ID=8480641
        BRANCH_BUILD=$(curl \
          -H "Accept: application/vnd.github.v3+json" \
          "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/actions/workflows/$WORKFLOW_ID/runs?branch=$REF&event=push" \
           | jq '.workflow_runs | max_by(.run_number)')

        if [ "$BRANCH_BUILD" == "" ]; then
          echo "failed to get branch build"
          exit 1
        fi

        status=$(echo $BRANCH_BUILD | jq -r '.status')
        conclusion=$(echo $BRANCH_BUILD | jq -r '.conclusion')

        if [ "$status" != "completed" ] && [ "$conclusion" != "success" ]; then
          echo "$status and $conclusion were not completed and successful"
          exit 1
        fi

        RUN_NUMBER=$(echo $BRANCH_BUILD | jq -r '.run_number')

        export TAG="${VERSION}-${RUN_NUMBER}"
        echo "setting tag to $TAG"
        echo "TAG=$TAG" >> $GITHUB_ENV
    - name: Checkout code
      uses: actions/checkout@v2
    - id: mirror
      name: Scan images
      run: |-
        echo "::group::Scan quay.io/rh-marketplace/redhat-marketplace-operator"
        id=$(curl -X GET "https://catalog.redhat.com/api/containers/v1/projects/certification/pid/ospid-c93f69b6-cb04-437b-89d6-e5220ce643cd" -H  "accept: application/json" -H  "X-API-KEY: $REDHAT_TOKEN" | jq -r '._id')
        digest=$(skopeo --override-os=linux inspect docker://quay.io/rh-marketplace/redhat-marketplace-operator:$TAG --raw | jq -r '.manifests[] | select(.platform.architecture == $arch) | .digest' --arg arch amd64)
        curl -X POST "https://catalog.redhat.com/api/containers/v1/projects/certification/id/$id/requests/scans" \
        --header 'Content-Type: application/json' \
        --header "X-API-KEY: $REDHAT_TOKEN" \
        --data-raw "{\"pull_spec\": \"quay.io/rh-marketplace/redhat-marketplace-operator@$digest\",\"tag\": \"$TAG-amd64\"}"
        echo "::endgroup::"
        echo "::group::Scan quay.io/rh-marketplace/redhat-marketplace-metric-state"
        id=$(curl -X GET "https://catalog.redhat.com/api/containers/v1/projects/certification/pid/ospid-9b9b0dbe-7adc-448e-9385-a556714a09c4" -H  "accept: application/json" -H  "X-API-KEY: $REDHAT_TOKEN" | jq -r '._id')
        digest=$(skopeo --override-os=linux inspect docker://quay.io/rh-marketplace/redhat-marketplace-metric-state:$TAG --raw | jq -r '.manifests[] | select(.platform.architecture == $arch) | .digest' --arg arch amd64)
        curl -X POST "https://catalog.redhat.com/api/containers/v1/projects/certification/id/$id/requests/scans" \
        --header 'Content-Type: application/json' \
        --header "X-API-KEY: $REDHAT_TOKEN" \
        --data-raw "{\"pull_spec\": \"quay.io/rh-marketplace/redhat-marketplace-metric-state@$digest\",\"tag\": \"$TAG-amd64\"}"
        echo "::endgroup::"
        echo "::group::Scan quay.io/rh-marketplace/redhat-marketplace-reporter"
        id=$(curl -X GET "https://catalog.redhat.com/api/containers/v1/projects/certification/pid/ospid-faa0f295-e195-4bcc-a3fc-a4b97ada317e" -H  "accept: application/json" -H  "X-API-KEY: $REDHAT_TOKEN" | jq -r '._id')
        digest=$(skopeo --override-os=linux inspect docker://quay.io/rh-marketplace/redhat-marketplace-reporter:$TAG --raw | jq -r '.manifests[] | select(.platform.architecture == $arch) | .digest' --arg arch amd64)
        curl -X POST "https://catalog.redhat.com/api/containers/v1/projects/certification/id/$id/requests/scans" \
        --header 'Content-Type: application/json' \
        --header "X-API-KEY: $REDHAT_TOKEN" \
        --data-raw "{\"pull_spec\": \"quay.io/rh-marketplace/redhat-marketplace-reporter@$digest\",\"tag\": \"$TAG-amd64\"}"
        echo "::endgroup::"
        echo "::group::Scan quay.io/rh-marketplace/redhat-marketplace-authcheck"
        id=$(curl -X GET "https://catalog.redhat.com/api/containers/v1/projects/certification/pid/ospid-ffed416e-c18d-4b88-8660-f586a4792785" -H  "accept: application/json" -H  "X-API-KEY: $REDHAT_TOKEN" | jq -r '._id')
        digest=$(skopeo --override-os=linux inspect docker://quay.io/rh-marketplace/redhat-marketplace-authcheck:$TAG --raw | jq -r '.manifests[] | select(.platform.architecture == $arch) | .digest' --arg arch amd64)
        curl -X POST "https://catalog.redhat.com/api/containers/v1/projects/certification/id/$id/requests/scans" \
        --header 'Content-Type: application/json' \
        --header "X-API-KEY: $REDHAT_TOKEN" \
        --data-raw "{\"pull_spec\": \"quay.io/rh-marketplace/redhat-marketplace-authcheck@$digest\",\"tag\": \"$TAG-amd64\"}"
        echo "::endgroup::"
        echo "::group::Scan quay.io/rh-marketplace/redhat-marketplace-operator"
        id=$(curl -X GET "https://catalog.redhat.com/api/containers/v1/projects/certification/pid/ospid-c93f69b6-cb04-437b-89d6-e5220ce643cd" -H  "accept: application/json" -H  "X-API-KEY: $REDHAT_TOKEN" | jq -r '._id')
        digest=$(skopeo --override-os=linux inspect docker://quay.io/rh-marketplace/redhat-marketplace-operator:$TAG --raw | jq -r '.manifests[] | select(.platform.architecture == $arch) | .digest' --arg arch ppc64le)
        curl -X POST "https://catalog.redhat.com/api/containers/v1/projects/certification/id/$id/requests/scans" \
        --header 'Content-Type: application/json' \
        --header "X-API-KEY: $REDHAT_TOKEN" \
        --data-raw "{\"pull_spec\": \"quay.io/rh-marketplace/redhat-marketplace-operator@$digest\",\"tag\": \"$TAG-ppc64le\"}"
        echo "::endgroup::"
        echo "::group::Scan quay.io/rh-marketplace/redhat-marketplace-metric-state"
        id=$(curl -X GET "https://catalog.redhat.com/api/containers/v1/projects/certification/pid/ospid-9b9b0dbe-7adc-448e-9385-a556714a09c4" -H  "accept: application/json" -H  "X-API-KEY: $REDHAT_TOKEN" | jq -r '._id')
        digest=$(skopeo --override-os=linux inspect docker://quay.io/rh-marketplace/redhat-marketplace-metric-state:$TAG --raw | jq -r '.manifests[] | select(.platform.architecture == $arch) | .digest' --arg arch ppc64le)
        curl -X POST "https://catalog.redhat.com/api/containers/v1/projects/certification/id/$id/requests/scans" \
        --header 'Content-Type: application/json' \
        --header "X-API-KEY: $REDHAT_TOKEN" \
        --data-raw "{\"pull_spec\": \"quay.io/rh-marketplace/redhat-marketplace-metric-state@$digest\",\"tag\": \"$TAG-ppc64le\"}"
        echo "::endgroup::"
        echo "::group::Scan quay.io/rh-marketplace/redhat-marketplace-reporter"
        id=$(curl -X GET "https://catalog.redhat.com/api/containers/v1/projects/certification/pid/ospid-faa0f295-e195-4bcc-a3fc-a4b97ada317e" -H  "accept: application/json" -H  "X-API-KEY: $REDHAT_TOKEN" | jq -r '._id')
        digest=$(skopeo --override-os=linux inspect docker://quay.io/rh-marketplace/redhat-marketplace-reporter:$TAG --raw | jq -r '.manifests[] | select(.platform.architecture == $arch) | .digest' --arg arch ppc64le)
        curl -X POST "https://catalog.redhat.com/api/containers/v1/projects/certification/id/$id/requests/scans" \
        --header 'Content-Type: application/json' \
        --header "X-API-KEY: $REDHAT_TOKEN" \
        --data-raw "{\"pull_spec\": \"quay.io/rh-marketplace/redhat-marketplace-reporter@$digest\",\"tag\": \"$TAG-ppc64le\"}"
        echo "::endgroup::"
        echo "::group::Scan quay.io/rh-marketplace/redhat-marketplace-authcheck"
        id=$(curl -X GET "https://catalog.redhat.com/api/containers/v1/projects/certification/pid/ospid-ffed416e-c18d-4b88-8660-f586a4792785" -H  "accept: application/json" -H  "X-API-KEY: $REDHAT_TOKEN" | jq -r '._id')
        digest=$(skopeo --override-os=linux inspect docker://quay.io/rh-marketplace/redhat-marketplace-authcheck:$TAG --raw | jq -r '.manifests[] | select(.platform.architecture == $arch) | .digest' --arg arch ppc64le)
        curl -X POST "https://catalog.redhat.com/api/containers/v1/projects/certification/id/$id/requests/scans" \
        --header 'Content-Type: application/json' \
        --header "X-API-KEY: $REDHAT_TOKEN" \
        --data-raw "{\"pull_spec\": \"quay.io/rh-marketplace/redhat-marketplace-authcheck@$digest\",\"tag\": \"$TAG-ppc64le\"}"
        echo "::endgroup::"
        echo "::group::Scan quay.io/rh-marketplace/redhat-marketplace-operator"
        id=$(curl -X GET "https://catalog.redhat.com/api/containers/v1/projects/certification/pid/ospid-c93f69b6-cb04-437b-89d6-e5220ce643cd" -H  "accept: application/json" -H  "X-API-KEY: $REDHAT_TOKEN" | jq -r '._id')
        digest=$(skopeo --override-os=linux inspect docker://quay.io/rh-marketplace/redhat-marketplace-operator:$TAG --raw | jq -r '.manifests[] | select(.platform.architecture == $arch) | .digest' --arg arch s390x)
        curl -X POST "https://catalog.redhat.com/api/containers/v1/projects/certification/id/$id/requests/scans" \
        --header 'Content-Type: application/json' \
        --header "X-API-KEY: $REDHAT_TOKEN" \
        --data-raw "{\"pull_spec\": \"quay.io/rh-marketplace/redhat-marketplace-operator@$digest\",\"tag\": \"$TAG-s390x\"}"
        echo "::endgroup::"
        echo "::group::Scan quay.io/rh-marketplace/redhat-marketplace-metric-state"
        id=$(curl -X GET "https://catalog.redhat.com/api/containers/v1/projects/certification/pid/ospid-9b9b0dbe-7adc-448e-9385-a556714a09c4" -H  "accept: application/json" -H  "X-API-KEY: $REDHAT_TOKEN" | jq -r '._id')
        digest=$(skopeo --override-os=linux inspect docker://quay.io/rh-marketplace/redhat-marketplace-metric-state:$TAG --raw | jq -r '.manifests[] | select(.platform.architecture == $arch) | .digest' --arg arch s390x)
        curl -X POST "https://catalog.redhat.com/api/containers/v1/projects/certification/id/$id/requests/scans" \
        --header 'Content-Type: application/json' \
        --header "X-API-KEY: $REDHAT_TOKEN" \
        --data-raw "{\"pull_spec\": \"quay.io/rh-marketplace/redhat-marketplace-metric-state@$digest\",\"tag\": \"$TAG-s390x\"}"
        echo "::endgroup::"
        echo "::group::Scan quay.io/rh-marketplace/redhat-marketplace-reporter"
        id=$(curl -X GET "https://catalog.redhat.com/api/containers/v1/projects/certification/pid/ospid-faa0f295-e195-4bcc-a3fc-a4b97ada317e" -H  "accept: application/json" -H  "X-API-KEY: $REDHAT_TOKEN" | jq -r '._id')
        digest=$(skopeo --override-os=linux inspect docker://quay.io/rh-marketplace/redhat-marketplace-reporter:$TAG --raw | jq -r '.manifests[] | select(.platform.architecture == $arch) | .digest' --arg arch s390x)
        curl -X POST "https://catalog.redhat.com/api/containers/v1/projects/certification/id/$id/requests/scans" \
        --header 'Content-Type: application/json' \
        --header "X-API-KEY: $REDHAT_TOKEN" \
        --data-raw "{\"pull_spec\": \"quay.io/rh-marketplace/redhat-marketplace-reporter@$digest\",\"tag\": \"$TAG-s390x\"}"
        echo "::endgroup::"
        echo "::group::Scan quay.io/rh-marketplace/redhat-marketplace-authcheck"
        id=$(curl -X GET "https://catalog.redhat.com/api/containers/v1/projects/certification/pid/ospid-ffed416e-c18d-4b88-8660-f586a4792785" -H  "accept: application/json" -H  "X-API-KEY: $REDHAT_TOKEN" | jq -r '._id')
        digest=$(skopeo --override-os=linux inspect docker://quay.io/rh-marketplace/redhat-marketplace-authcheck:$TAG --raw | jq -r '.manifests[] | select(.platform.architecture == $arch) | .digest' --arg arch s390x)
        curl -X POST "https://catalog.redhat.com/api/containers/v1/projects/certification/id/$id/requests/scans" \
        --header 'Content-Type: application/json' \
        --header "X-API-KEY: $REDHAT_TOKEN" \
        --data-raw "{\"pull_spec\": \"quay.io/rh-marketplace/redhat-marketplace-authcheck@$digest\",\"tag\": \"$TAG-s390x\"}"
        echo "::endgroup::"
      shell: bash {0}
      env:
        REDHAT_TOKEN: ${{ secrets.redhat_api_key }}
    - uses: peter-evans/create-or-update-comment@v1
      with:
        comment-id: ${{github.event.comment.id}}
        reactions: rocket
  publish:
    name: Publish Images
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    if: ${{ github.event.issue.pull_request && startsWith(github.event.comment.body,
      '/publish')}}
    steps:
    - name: Check if user has write access
      uses: lannonbr/repo-permission-check-action@2.0.0
      with:
        permission: write
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - id: pr
      name: Get PR for Comment
      run: |-
        PR=$(curl -H "Accept: application/vnd.github.v3+json" \
             "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/pulls/${{ github.event.issue.number }}" )
        echo "::set-output name=prSha::$(echo $PR | jq -r ".head.sha")"
        echo "::set-output name=prRef::$(echo $PR | jq -r ".head.ref")"
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ steps.pr.outputs.prSha }}
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16.7
    - name: Cache Go modules
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ github.sha }}
        restore-keys: ${{ runner.os }}-go-
    - name: Install Kubebuilder
      run: |-
        os=$(go env GOOS)
        arch=$(go env GOARCH)
        version=2.3.2

        # download kubebuilder and extract it to tmp
        # https://github.com/kubernetes-sigs/kubebuilder/releases/download/v3.1.0/kubebuilder_darwin_amd64
        # https://github.com/kubernetes-sigs/kubebuilder/releases/download/v2.3.1/kubebuilder_2.3.1_darwin_amd64.tar.gz
        # 3.0 + versions will not be tar.gz
        curl -L https://github.com/kubernetes-sigs/kubebuilder/releases/download/v${version}/kubebuilder_${version}_${os}_${arch}.tar.gz | tar -xz -C /tmp/

        # move to a long-term location and put it on your path
        # (you'll need to set the KUBEBUILDER_ASSETS env var if you put it somewhere else)
        sudo mv /tmp/kubebuilder_${version}_${os}_${arch} /usr/local/kubebuilder
        echo "/usr/local/kubebuilder/bin" >> $GITHUB_PATH
    - name: Install operatorsdk
      run: |-
        version=v1.7.2
        export ARCH=$(case $(arch) in x86_64) echo -n amd64 ;; aarch64) echo -n arm64 ;; *) echo -n $(arch) ;; esac)
        export OS=$(uname | awk '{print tolower($0)}')
        export OPERATOR_SDK_DL_URL=https://github.com/operator-framework/operator-sdk/releases/download/${version}
        curl -LO ${OPERATOR_SDK_DL_URL}/operator-sdk_${OS}_${ARCH}
        curl -LO ${OPERATOR_SDK_DL_URL}/checksums.txt
        curl -LO ${OPERATOR_SDK_DL_URL}/checksums.txt.asc
        grep operator-sdk_${OS}_${ARCH} checksums.txt | sha256sum -c -
        chmod +x operator-sdk_${OS}_${ARCH} && sudo mv operator-sdk_${OS}_${ARCH} /usr/local/bin/operator-sdk
        curl -LO https://github.com/operator-framework/operator-registry/releases/download/v1.15.3/${OS}-${ARCH}-opm
        chmod +x ${OS}-${ARCH}-opm && sudo mv ${OS}-${ARCH}-opm /usr/local/bin/opm
    - id: version
      name: Get Version
      run: |-
        make svu
        export VERSION="$(./bin/svu next)"

        if [ "$REF" == "" ]; then
        	REF="$GITHUB_REF"
        fi

        if [[ "$GITHUB_HEAD_REF" != "" ]]; then
        	echo "Request is a PR $GITHUB_HEAD_REF is head; is base $GITHUB_BASE_REF is base"
          REF="$GITHUB_HEAD_REF"
        fi

        echo "Found ref $REF"

        if [[ "$VERSION" == "" ]]; then
          echo "failed to find version"
          exit 1
        fi

        if [[ "$REF" == *"release"* ||  "$REF" == *"hotfix"* ]] ; then
        echo "using release version and github_run_number"
        export TAG="${VERSION}-${GITHUB_RUN_NUMBER}"
        export IS_DEV="false"
        else
        echo "using beta in version"
        export TAG="${VERSION}-beta-${GITHUB_RUN_NUMBER}"
        export IS_DEV="true"
        fi

        echo "Found version $VERSION"
        echo "::set-output name=version::$VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Found tag $TAG"
        echo "TAG=$TAG" >> $GITHUB_ENV
        echo "::set-output name=tag::$TAG"
        echo "IS_DEV=$IS_DEV" >> $GITHUB_ENV
        echo "::set-output name=isDev::$IS_DEV"
        echo "REF=$REF" >> $GITHUB_ENV
      env:
        REF: ${{ steps.pr.outputs.prRef }}
    - name: Get Latest Bundle Run
      run: |-
        WORKFLOW_ID=8480641
        BRANCH_BUILD=$(curl \
          -H "Accept: application/vnd.github.v3+json" \
          "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/actions/workflows/$WORKFLOW_ID/runs?branch=$REF&event=push" \
           | jq '.workflow_runs | max_by(.run_number)')

        if [ "$BRANCH_BUILD" == "" ]; then
          echo "failed to get branch build"
          exit 1
        fi

        status=$(echo $BRANCH_BUILD | jq -r '.status')
        conclusion=$(echo $BRANCH_BUILD | jq -r '.conclusion')

        if [ "$status" != "completed" ] && [ "$conclusion" != "success" ]; then
          echo "$status and $conclusion were not completed and successful"
          exit 1
        fi

        RUN_NUMBER=$(echo $BRANCH_BUILD | jq -r '.run_number')

        export TAG="${VERSION}-${RUN_NUMBER}"
        echo "setting tag to $TAG"
        echo "TAG=$TAG" >> $GITHUB_ENV
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        registry: registry.connect.redhat.com
        username: ${{secrets['REDHAT_IO_USER']}}
        password: ${{secrets['REDHAT_IO_PASSWORD']}}
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Publish Operator Images
      run: |-
        make pc-tool
        ./bin/partner-connect-tool publish --username $RH_USER --password $RH_PASSWORD  --images https://connect.redhat.com/projects/5e98b6fac77ce6fca8ac859c/images,,$TAG --images https://connect.redhat.com/projects/5e98b6fc32116b90fd024d06/images,,$TAG --images https://connect.redhat.com/projects/5f36ea2f74cc50b8f01a838d/images,,$TAG --images https://connect.redhat.com/projects/5f62b71018e80cdc21edf22f/images,,$TAG --images https://connect.redhat.com/projects/5f68c9457115dbd1183ccab6/images,,$TAG
      env:
        RH_USER: ${{ secrets['REDHAT_IO_USER'] }}
        RH_PASSWORD: ${{ secrets['REDHAT_IO_PASSWORD'] }}
        RH_CONNECT_TOKEN: ${{ secrets.redhat_api_key }}
    - uses: peter-evans/create-or-update-comment@v1
      with:
        comment-id: ${{github.event.comment.id}}
        reactions: rocket
  push-operator:
    name: Push Operator
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    if: ${{ github.event.issue.pull_request && startsWith(github.event.comment.body,
      '/push-operator')}}
    steps:
    - name: Check if user has write access
      uses: lannonbr/repo-permission-check-action@2.0.0
      with:
        permission: write
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - id: pr
      name: Get PR for Comment
      run: |-
        PR=$(curl -H "Accept: application/vnd.github.v3+json" \
             "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/pulls/${{ github.event.issue.number }}" )
        echo "::set-output name=prSha::$(echo $PR | jq -r ".head.sha")"
        echo "::set-output name=prRef::$(echo $PR | jq -r ".head.ref")"
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ steps.pr.outputs.prSha }}
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16.7
    - name: Cache Go modules
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ github.sha }}
        restore-keys: ${{ runner.os }}-go-
    - name: Install Kubebuilder
      run: |-
        os=$(go env GOOS)
        arch=$(go env GOARCH)
        version=2.3.2

        # download kubebuilder and extract it to tmp
        # https://github.com/kubernetes-sigs/kubebuilder/releases/download/v3.1.0/kubebuilder_darwin_amd64
        # https://github.com/kubernetes-sigs/kubebuilder/releases/download/v2.3.1/kubebuilder_2.3.1_darwin_amd64.tar.gz
        # 3.0 + versions will not be tar.gz
        curl -L https://github.com/kubernetes-sigs/kubebuilder/releases/download/v${version}/kubebuilder_${version}_${os}_${arch}.tar.gz | tar -xz -C /tmp/

        # move to a long-term location and put it on your path
        # (you'll need to set the KUBEBUILDER_ASSETS env var if you put it somewhere else)
        sudo mv /tmp/kubebuilder_${version}_${os}_${arch} /usr/local/kubebuilder
        echo "/usr/local/kubebuilder/bin" >> $GITHUB_PATH
    - name: Install operatorsdk
      run: |-
        version=v1.7.2
        export ARCH=$(case $(arch) in x86_64) echo -n amd64 ;; aarch64) echo -n arm64 ;; *) echo -n $(arch) ;; esac)
        export OS=$(uname | awk '{print tolower($0)}')
        export OPERATOR_SDK_DL_URL=https://github.com/operator-framework/operator-sdk/releases/download/${version}
        curl -LO ${OPERATOR_SDK_DL_URL}/operator-sdk_${OS}_${ARCH}
        curl -LO ${OPERATOR_SDK_DL_URL}/checksums.txt
        curl -LO ${OPERATOR_SDK_DL_URL}/checksums.txt.asc
        grep operator-sdk_${OS}_${ARCH} checksums.txt | sha256sum -c -
        chmod +x operator-sdk_${OS}_${ARCH} && sudo mv operator-sdk_${OS}_${ARCH} /usr/local/bin/operator-sdk
        curl -LO https://github.com/operator-framework/operator-registry/releases/download/v1.15.3/${OS}-${ARCH}-opm
        chmod +x ${OS}-${ARCH}-opm && sudo mv ${OS}-${ARCH}-opm /usr/local/bin/opm
    - id: version
      name: Get Version
      run: |-
        make svu
        export VERSION="$(./bin/svu next)"

        if [ "$REF" == "" ]; then
        	REF="$GITHUB_REF"
        fi

        if [[ "$GITHUB_HEAD_REF" != "" ]]; then
        	echo "Request is a PR $GITHUB_HEAD_REF is head; is base $GITHUB_BASE_REF is base"
          REF="$GITHUB_HEAD_REF"
        fi

        echo "Found ref $REF"

        if [[ "$VERSION" == "" ]]; then
          echo "failed to find version"
          exit 1
        fi

        if [[ "$REF" == *"release"* ||  "$REF" == *"hotfix"* ]] ; then
        echo "using release version and github_run_number"
        export TAG="${VERSION}-${GITHUB_RUN_NUMBER}"
        export IS_DEV="false"
        else
        echo "using beta in version"
        export TAG="${VERSION}-beta-${GITHUB_RUN_NUMBER}"
        export IS_DEV="true"
        fi

        echo "Found version $VERSION"
        echo "::set-output name=version::$VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Found tag $TAG"
        echo "TAG=$TAG" >> $GITHUB_ENV
        echo "::set-output name=tag::$TAG"
        echo "IS_DEV=$IS_DEV" >> $GITHUB_ENV
        echo "::set-output name=isDev::$IS_DEV"
        echo "REF=$REF" >> $GITHUB_ENV
      env:
        REF: ${{ steps.pr.outputs.prRef }}
    - name: Get Latest Bundle Run
      run: |-
        WORKFLOW_ID=8480641
        BRANCH_BUILD=$(curl \
          -H "Accept: application/vnd.github.v3+json" \
          "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/actions/workflows/$WORKFLOW_ID/runs?branch=$REF&event=push" \
           | jq '.workflow_runs | max_by(.run_number)')

        if [ "$BRANCH_BUILD" == "" ]; then
          echo "failed to get branch build"
          exit 1
        fi

        status=$(echo $BRANCH_BUILD | jq -r '.status')
        conclusion=$(echo $BRANCH_BUILD | jq -r '.conclusion')

        if [ "$status" != "completed" ] && [ "$conclusion" != "success" ]; then
          echo "$status and $conclusion were not completed and successful"
          exit 1
        fi

        RUN_NUMBER=$(echo $BRANCH_BUILD | jq -r '.run_number')

        export TAG="${VERSION}-${RUN_NUMBER}"
        echo "setting tag to $TAG"
        echo "TAG=$TAG" >> $GITHUB_ENV
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        registry: registry.connect.redhat.com
        username: ${{secrets['REDHAT_IO_USER']}}
        password: ${{secrets['REDHAT_IO_PASSWORD']}}
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Copy Manifest
      run: |-
        echo "::group::Push scan.connect.redhat.com/ospid-64f06656-d9d4-43ef-a227-3b9c198800a1/redhat-marketplace-operator-manifest:$TARGET_TAG"
        skopeo --override-os=linux inspect docker://scan.connect.redhat.com/ospid-64f06656-d9d4-43ef-a227-3b9c198800a1/redhat-marketplace-operator-manifest:$TARGET_TAG --creds ${{secrets['pcUser']}}:${{secrets['pcPasswordOperatorManifest']}} > /dev/null
        ([[ $? == 0 ]] && echo "exists=true" || skopeo copy docker://quay.io/rh-marketplace/redhat-marketplace-operator-manifest:$TAG docker://scan.connect.redhat.com/ospid-64f06656-d9d4-43ef-a227-3b9c198800a1/redhat-marketplace-operator-manifest:$TARGET_TAG --dest-creds ${{secrets['pcUser']}}:${{secrets['pcPasswordOperatorManifest']}})
        echo "::endgroup::"
      shell: bash {0}
      env:
        TARGET_TAG: ${{ env.TAG }}-${{ env.GITHUB_RUN_ID }}
    - uses: peter-evans/create-or-update-comment@v1
      with:
        comment-id: ${{github.event.comment.id}}
        reactions: rocket
  publish-operator:
    name: Publish Operator
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    if: ${{ github.event.issue.pull_request && startsWith(github.event.comment.body,
      '/operator') }}
    steps:
    - name: Check if user has write access
      uses: lannonbr/repo-permission-check-action@2.0.0
      with:
        permission: write
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - id: pr
      name: Get PR for Comment
      run: |-
        PR=$(curl -H "Accept: application/vnd.github.v3+json" \
             "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/pulls/${{ github.event.issue.number }}" )
        echo "::set-output name=prSha::$(echo $PR | jq -r ".head.sha")"
        echo "::set-output name=prRef::$(echo $PR | jq -r ".head.ref")"
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ steps.pr.outputs.prSha }}
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16.7
    - name: Cache Go modules
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ github.sha }}
        restore-keys: ${{ runner.os }}-go-
    - name: Install Kubebuilder
      run: |-
        os=$(go env GOOS)
        arch=$(go env GOARCH)
        version=2.3.2

        # download kubebuilder and extract it to tmp
        # https://github.com/kubernetes-sigs/kubebuilder/releases/download/v3.1.0/kubebuilder_darwin_amd64
        # https://github.com/kubernetes-sigs/kubebuilder/releases/download/v2.3.1/kubebuilder_2.3.1_darwin_amd64.tar.gz
        # 3.0 + versions will not be tar.gz
        curl -L https://github.com/kubernetes-sigs/kubebuilder/releases/download/v${version}/kubebuilder_${version}_${os}_${arch}.tar.gz | tar -xz -C /tmp/

        # move to a long-term location and put it on your path
        # (you'll need to set the KUBEBUILDER_ASSETS env var if you put it somewhere else)
        sudo mv /tmp/kubebuilder_${version}_${os}_${arch} /usr/local/kubebuilder
        echo "/usr/local/kubebuilder/bin" >> $GITHUB_PATH
    - name: Install operatorsdk
      run: |-
        version=v1.7.2
        export ARCH=$(case $(arch) in x86_64) echo -n amd64 ;; aarch64) echo -n arm64 ;; *) echo -n $(arch) ;; esac)
        export OS=$(uname | awk '{print tolower($0)}')
        export OPERATOR_SDK_DL_URL=https://github.com/operator-framework/operator-sdk/releases/download/${version}
        curl -LO ${OPERATOR_SDK_DL_URL}/operator-sdk_${OS}_${ARCH}
        curl -LO ${OPERATOR_SDK_DL_URL}/checksums.txt
        curl -LO ${OPERATOR_SDK_DL_URL}/checksums.txt.asc
        grep operator-sdk_${OS}_${ARCH} checksums.txt | sha256sum -c -
        chmod +x operator-sdk_${OS}_${ARCH} && sudo mv operator-sdk_${OS}_${ARCH} /usr/local/bin/operator-sdk
        curl -LO https://github.com/operator-framework/operator-registry/releases/download/v1.15.3/${OS}-${ARCH}-opm
        chmod +x ${OS}-${ARCH}-opm && sudo mv ${OS}-${ARCH}-opm /usr/local/bin/opm
    - id: version
      name: Get Version
      run: |-
        make svu
        export VERSION="$(./bin/svu next)"

        if [ "$REF" == "" ]; then
        	REF="$GITHUB_REF"
        fi

        if [[ "$GITHUB_HEAD_REF" != "" ]]; then
        	echo "Request is a PR $GITHUB_HEAD_REF is head; is base $GITHUB_BASE_REF is base"
          REF="$GITHUB_HEAD_REF"
        fi

        echo "Found ref $REF"

        if [[ "$VERSION" == "" ]]; then
          echo "failed to find version"
          exit 1
        fi

        if [[ "$REF" == *"release"* ||  "$REF" == *"hotfix"* ]] ; then
        echo "using release version and github_run_number"
        export TAG="${VERSION}-${GITHUB_RUN_NUMBER}"
        export IS_DEV="false"
        else
        echo "using beta in version"
        export TAG="${VERSION}-beta-${GITHUB_RUN_NUMBER}"
        export IS_DEV="true"
        fi

        echo "Found version $VERSION"
        echo "::set-output name=version::$VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Found tag $TAG"
        echo "TAG=$TAG" >> $GITHUB_ENV
        echo "::set-output name=tag::$TAG"
        echo "IS_DEV=$IS_DEV" >> $GITHUB_ENV
        echo "::set-output name=isDev::$IS_DEV"
        echo "REF=$REF" >> $GITHUB_ENV
      env:
        REF: ${{ steps.pr.outputs.prRef }}
    - name: Get Latest Bundle Run
      run: |-
        WORKFLOW_ID=8480641
        BRANCH_BUILD=$(curl \
          -H "Accept: application/vnd.github.v3+json" \
          "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/actions/workflows/$WORKFLOW_ID/runs?branch=$REF&event=push" \
           | jq '.workflow_runs | max_by(.run_number)')

        if [ "$BRANCH_BUILD" == "" ]; then
          echo "failed to get branch build"
          exit 1
        fi

        status=$(echo $BRANCH_BUILD | jq -r '.status')
        conclusion=$(echo $BRANCH_BUILD | jq -r '.conclusion')

        if [ "$status" != "completed" ] && [ "$conclusion" != "success" ]; then
          echo "$status and $conclusion were not completed and successful"
          exit 1
        fi

        RUN_NUMBER=$(echo $BRANCH_BUILD | jq -r '.run_number')

        export TAG="${VERSION}-${RUN_NUMBER}"
        echo "setting tag to $TAG"
        echo "TAG=$TAG" >> $GITHUB_ENV
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        registry: registry.connect.redhat.com
        username: ${{secrets['REDHAT_IO_USER']}}
        password: ${{secrets['REDHAT_IO_PASSWORD']}}
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Publish Operator
      run: |-
        make pc-tool
        ./bin/partner-connect-tool publish --username $RH_USER --password $RH_PASSWORD --is-operator-manifest=true --images https://connect.redhat.com/projects/5f68c9457115dbd1183ccab6/images,,$TAG
      env:
        RH_USER: ${{ secrets['REDHAT_IO_USER'] }}
        RH_PASSWORD: ${{ secrets['REDHAT_IO_PASSWORD'] }}
        RH_CONNECT_TOKEN: ${{ secrets.redhat_api_key }}
    - uses: peter-evans/create-or-update-comment@v1
      with:
        comment-id: ${{github.event.comment.id}}
        reactions: rocket
